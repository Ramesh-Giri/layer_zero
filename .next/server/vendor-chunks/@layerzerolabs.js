"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@layerzerolabs";
exports.ids = ["vendor-chunks/@layerzerolabs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@layerzerolabs/lz-v2-utilities/dist/index.cjs":
/*!********************************************************************!*\
  !*** ./node_modules/@layerzerolabs/lz-v2-utilities/dist/index.cjs ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar address = __webpack_require__(/*! @ethersproject/address */ \"(ssr)/./node_modules/@ethersproject/address/lib.esm/index.js\");\nvar bytes = __webpack_require__(/*! @ethersproject/bytes */ \"(ssr)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\nvar web3_js = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\nvar abi = __webpack_require__(/*! @ethersproject/abi */ \"(ssr)/./node_modules/@ethersproject/abi/lib.esm/index.js\");\nvar bignumber = __webpack_require__(/*! @ethersproject/bignumber */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib.esm/index.js\");\nvar solidity = __webpack_require__(/*! @ethersproject/solidity */ \"(ssr)/./node_modules/@ethersproject/solidity/lib.esm/index.js\");\nvar invariant = __webpack_require__(/*! tiny-invariant */ \"(ssr)/./node_modules/tiny-invariant/dist/tiny-invariant.cjs.js\");\nvar keccak256 = __webpack_require__(/*! @ethersproject/keccak256 */ \"(ssr)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }\n\nvar invariant__default = /*#__PURE__*/_interopDefault(invariant);\n\n// src/utils/hex.ts\nfunction hexZeroPadTo32(addr) {\n  return bytes.hexZeroPad(addr, 32);\n}\nfunction bytes32ToEthAddress(bytes32) {\n  if (bytes32 instanceof Uint8Array) {\n    bytes32 = bytes.hexlify(bytes32);\n  }\n  return address.getAddress(bytes32.slice(-40));\n}\nfunction trim0x(str) {\n  return str.replace(/^0x/, \"\");\n}\nfunction addressToBytes32(address) {\n  if (isSolanaAddress(address)) {\n    return new web3_js.PublicKey(address).toBytes();\n  } else if (address.startsWith(\"0x\") && address.length <= 66) {\n    return bytes.arrayify(hexZeroPadTo32(address));\n  }\n  throw new Error(\"Invalid address\");\n}\nvar solanaAddressRegex = /^([1-9A-HJ-NP-Za-km-z]{32,44})$/;\nfunction isSolanaAddress(address) {\n  return solanaAddressRegex.test(address);\n}\n\n// src/utils/precrime.ts\nvar CONFIG_VERSION_OFFSET = 0;\nvar MAX_BATCH_SIZE_OFFSET = 2;\nvar NUMBER_OF_PEERS_OFFSET = 10;\nvar PEERS_OFFSET = 12;\nfunction parsePrecrimeConfig(precrimeConfig) {\n  const data = trim0x(precrimeConfig);\n  const version = parseInt(data.slice(0, 4), 16);\n  if (version === 1) {\n    return parsePrecrimeConfigV1(precrimeConfig);\n  } else if (version === 2) {\n    return parsePrecrimeConfigV2(precrimeConfig);\n  }\n  throw new Error(`Unsupported precrime config version: ${version}`);\n}\nfunction parsePrecrimeConfigV1(precrimeConfig) {\n  const data = trim0x(precrimeConfig);\n  const version = parseInt(data.slice(0, 4), 16);\n  const maxBatchSize = parseInt(data.slice(4, 20), 16);\n  const remoteChainsLength = parseInt(data.slice(20, 84), 16);\n  const remoteChainsBytes = data.slice(84, 84 + remoteChainsLength * 64);\n  const remoteAddressesBytes = data.slice(\n    84 + remoteChainsLength * 64,\n    84 + remoteChainsLength * 64 + remoteChainsLength * 64\n  );\n  const remoteChainsBytesArray = [];\n  const remoteAddressesBytesArray = [];\n  let start = 0;\n  let end = 64;\n  for (let i = 0; i < remoteChainsLength; i++) {\n    remoteChainsBytesArray.push(parseInt(remoteChainsBytes.slice(start, end), 16));\n    remoteAddressesBytesArray.push(`0x${remoteAddressesBytes.slice(start, end)}`);\n    start += 64;\n    end += 64;\n  }\n  return { version, maxBatchSize, remoteEids: remoteChainsBytesArray, remoteAddresses: remoteAddressesBytesArray };\n}\nfunction parsePrecrimeConfigV2(precrimeConfig) {\n  const buffer = Buffer.from(trim0x(precrimeConfig), \"hex\");\n  const version = buffer.readUInt16BE(CONFIG_VERSION_OFFSET);\n  const maxBatchSize = buffer.readBigUint64BE(MAX_BATCH_SIZE_OFFSET);\n  const peers = new Array();\n  if (buffer.length > NUMBER_OF_PEERS_OFFSET) {\n    const numOfPeers = buffer.readUInt16BE(NUMBER_OF_PEERS_OFFSET);\n    for (let i = 0; i < numOfPeers; i++) {\n      const offset = PEERS_OFFSET + i * (4 + 2 * 32);\n      const eid = buffer.readUInt32BE(offset);\n      const preCrimeAddress = \"0x\" + buffer.slice(offset + 4, offset + 4 + 32).toString(\"hex\");\n      const oappAddress = \"0x\" + buffer.slice(offset + 4 + 32, offset + 4 + 32 + 32).toString(\"hex\");\n      peers.push({\n        eid,\n        preCrimeAddress,\n        oappAddress\n      });\n    }\n  }\n  return {\n    version,\n    maxBatchSize,\n    peers\n  };\n}\nvar parseError = (errorData, intf) => {\n  const buildInError = parseBuildInError(errorData);\n  if (buildInError !== void 0) {\n    return buildInError;\n  }\n  if (intf) {\n    try {\n      return intf.parseError(errorData);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n};\nfunction parseBuildInError(errorData) {\n  if (errorData.startsWith(\"0x08c379a0\")) {\n    const content = `0x${errorData.substring(10)}`;\n    const reason = abi.defaultAbiCoder.decode([\"string\"], content);\n    return reason[0];\n  }\n  if (errorData.startsWith(\"0x4e487b71\")) {\n    const content = `0x${errorData.substring(10)}`;\n    const code = abi.defaultAbiCoder.decode([\"uint\"], content);\n    return code[0];\n  }\n  if (errorData === \"0x\") {\n    return \"\";\n  }\n}\nvar OptionType = /* @__PURE__ */ ((OptionType2) => {\n  OptionType2[OptionType2[\"TYPE_1\"] = 1] = \"TYPE_1\";\n  OptionType2[OptionType2[\"TYPE_2\"] = 2] = \"TYPE_2\";\n  OptionType2[OptionType2[\"TYPE_3\"] = 3] = \"TYPE_3\";\n  return OptionType2;\n})(OptionType || {});\nvar MAX_UINT_128 = bignumber.BigNumber.from(\"0xffffffffffffffffffffffffffffffff\");\nfunction optionsType1(_extraGas) {\n  const extraGas = bignumber.BigNumber.from(_extraGas);\n  invariant__default.default(extraGas.lte(MAX_UINT_128), \"extraGas should be less than MAX_UINT_128\");\n  return solidity.pack([\"uint16\", \"uint256\"], [1 /* TYPE_1 */, extraGas]);\n}\nfunction optionsType2(_extraGas, _dstNativeAmt, _dstNativeAddress) {\n  const extraGas = bignumber.BigNumber.from(_extraGas);\n  invariant__default.default(extraGas.lte(MAX_UINT_128), \"extraGas should be less than MAX_UINT_128\");\n  const dstNativeAmt = bignumber.BigNumber.from(_dstNativeAmt);\n  invariant__default.default(dstNativeAmt.lte(MAX_UINT_128), \"dstNativeAmt should be less than MAX_UINT_128\");\n  return solidity.pack(\n    [\"uint16\", \"uint256\", \"uint256\", \"bytes\"],\n    [2 /* TYPE_2 */, bignumber.BigNumber.from(extraGas), bignumber.BigNumber.from(dstNativeAmt), _dstNativeAddress]\n  );\n}\nvar WorkerId = /* @__PURE__ */ ((WorkerId2) => {\n  WorkerId2[WorkerId2[\"EXECUTOR\"] = 1] = \"EXECUTOR\";\n  WorkerId2[WorkerId2[\"VERIFIER\"] = 2] = \"VERIFIER\";\n  WorkerId2[WorkerId2[\"TREASURY\"] = 255] = \"TREASURY\";\n  return WorkerId2;\n})(WorkerId || {});\nvar ExecutorOptionType = /* @__PURE__ */ ((ExecutorOptionType2) => {\n  ExecutorOptionType2[ExecutorOptionType2[\"LZ_RECEIVE\"] = 1] = \"LZ_RECEIVE\";\n  ExecutorOptionType2[ExecutorOptionType2[\"NATIVE_DROP\"] = 2] = \"NATIVE_DROP\";\n  ExecutorOptionType2[ExecutorOptionType2[\"COMPOSE\"] = 3] = \"COMPOSE\";\n  ExecutorOptionType2[ExecutorOptionType2[\"ORDERED\"] = 4] = \"ORDERED\";\n  return ExecutorOptionType2;\n})(ExecutorOptionType || {});\nvar VerifierOptionType = /* @__PURE__ */ ((VerifierOptionType2) => {\n  VerifierOptionType2[VerifierOptionType2[\"PRECRIME\"] = 1] = \"PRECRIME\";\n  return VerifierOptionType2;\n})(VerifierOptionType || {});\nvar Options = class _Options {\n  workerOptions = [];\n  // dissuade public instantiation\n  constructor() {\n  }\n  /**\n   * Create a new options instance.\n   */\n  static newOptions() {\n    return new _Options();\n  }\n  /**\n   * Create an options instance from a hex string.\n   * @param {string} optionsHex The hex string to decode.\n   */\n  static fromOptions(optionsHex) {\n    const options = new _Options();\n    const optionsBytes = bytes.arrayify(optionsHex);\n    const optionsType = bignumber.BigNumber.from(optionsBytes.slice(0, 2)).toNumber();\n    if (optionsType === 3 /* TYPE_3 */) {\n      let cursor = 2;\n      while (cursor < optionsBytes.byteLength) {\n        const workerId = bignumber.BigNumber.from(optionsBytes.slice(cursor, cursor + 1)).toNumber();\n        cursor += 1;\n        const size = bignumber.BigNumber.from(optionsBytes.slice(cursor, cursor + 2)).toNumber();\n        cursor += 2;\n        if (workerId === 1 /* EXECUTOR */) {\n          const optionType = bignumber.BigNumber.from(optionsBytes.slice(cursor, cursor + 1)).toNumber();\n          cursor += 1;\n          const params = optionsBytes.slice(cursor, cursor + size - 1);\n          cursor += size - 1;\n          options.addOption(workerId, { type: optionType, params: bytes.hexlify(params) });\n        } else if (workerId === 2 /* VERIFIER */) {\n          const verifierIdx = bignumber.BigNumber.from(optionsBytes.slice(cursor, cursor + 1)).toNumber();\n          cursor += 1;\n          const optionType = bignumber.BigNumber.from(optionsBytes.slice(cursor, cursor + 1)).toNumber();\n          cursor += 1;\n          const params = optionsBytes.slice(cursor, cursor + size - 2);\n          cursor += size - 2;\n          options.addOption(workerId, {\n            type: optionType,\n            index: verifierIdx,\n            params: bytes.hexlify(params)\n          });\n        }\n      }\n    } else if (optionsType === 2 /* TYPE_2 */) {\n      const extraGas = bignumber.BigNumber.from(optionsBytes.slice(2, 34)).toBigInt();\n      const dstNativeAmt = bignumber.BigNumber.from(optionsBytes.slice(34, 66)).toBigInt();\n      const dstNativeAddress = bytes.hexlify(optionsBytes.slice(66, optionsBytes.byteLength));\n      options.addExecutorLzReceiveOption(extraGas).addExecutorNativeDropOption(dstNativeAmt, dstNativeAddress);\n    } else if (optionsType === 1 /* TYPE_1 */) {\n      const extraGas = bignumber.BigNumber.from(optionsBytes.slice(2, 34)).toBigInt();\n      options.addExecutorLzReceiveOption(extraGas);\n    }\n    return options;\n  }\n  /**\n   * Add ExecutorOptionType.LZ_RECEIVE option.\n   * @param {GasLimit} gasLimit\n   * @param {NativeDrop} nativeDrop\n   */\n  addExecutorLzReceiveOption(gasLimit, nativeDrop = 0) {\n    const gasLimitBN = bignumber.BigNumber.from(gasLimit);\n    invariant__default.default(gasLimitBN.lte(MAX_UINT_128), \"gasLimit shouldn't be greater than MAX_UINT_128\");\n    const nativeDropBN = bignumber.BigNumber.from(nativeDrop);\n    invariant__default.default(nativeDropBN.lte(MAX_UINT_128), \"value shouldn't be greater than MAX_UINT_128\");\n    this.addOption(1 /* EXECUTOR */, {\n      type: 1 /* LZ_RECEIVE */,\n      params: nativeDropBN.eq(0) ? solidity.pack([\"uint128\"], [gasLimitBN]) : solidity.pack([\"uint128\", \"uint128\"], [gasLimitBN, nativeDropBN])\n    });\n    return this;\n  }\n  /**\n   * Add ExecutorOptionType.NATIVE_DROP option.\n   * @param {NativeDrop} nativeDrop\n   * @param {string} receiver\n   */\n  addExecutorNativeDropOption(nativeDrop, receiver) {\n    const amountBN = bignumber.BigNumber.from(nativeDrop);\n    invariant__default.default(amountBN.lte(MAX_UINT_128), \"nativeDrop shouldn't be greater than MAX_UINT_128\");\n    this.addOption(1 /* EXECUTOR */, {\n      type: 2 /* NATIVE_DROP */,\n      params: solidity.pack([\"uint128\", \"bytes32\"], [amountBN, hexZeroPadTo32(receiver)])\n    });\n    return this;\n  }\n  /**\n   * Add ExecutorOptionType.COMPOSE option.\n   * @param {number} index\n   * @param {GasLimit} gasLimit\n   * @param {NativeDrop} nativeDrop\n   */\n  addExecutorComposeOption(index, gasLimit, nativeDrop = 0) {\n    const gasLimitBN = bignumber.BigNumber.from(gasLimit);\n    invariant__default.default(gasLimitBN.lte(MAX_UINT_128), \"gasLimit shouldn't be greater than MAX_UINT_128\");\n    const nativeDropBN = bignumber.BigNumber.from(nativeDrop);\n    invariant__default.default(nativeDropBN.lte(MAX_UINT_128), \"nativeDrop shouldn't be greater than MAX_UINT_128\");\n    const option = nativeDropBN.gt(0) ? {\n      type: 3 /* COMPOSE */,\n      params: solidity.pack([\"uint16\", \"uint128\", \"uint128\"], [index, gasLimitBN, nativeDropBN])\n    } : {\n      type: 3 /* COMPOSE */,\n      params: solidity.pack([\"uint16\", \"uint128\"], [index, gasLimitBN])\n    };\n    this.addOption(1 /* EXECUTOR */, option);\n    return this;\n  }\n  /**\n   * Add ExecutorOptionType.ORDERED option.\n   */\n  addExecutorOrderedExecutionOption() {\n    this.addOption(1 /* EXECUTOR */, {\n      type: 4 /* ORDERED */,\n      params: \"0x\"\n    });\n    return this;\n  }\n  /**\n   * Add VerifierOptionType.PRECRIME option.\n   * @param {number} verifierIdx\n   */\n  addVerifierPrecrimeOption(verifierIdx) {\n    this.addOption(2 /* VERIFIER */, {\n      type: 1 /* PRECRIME */,\n      index: verifierIdx,\n      params: \"0x\"\n    });\n    return this;\n  }\n  /**\n   * Serialize Options to hex string.\n   */\n  toHex() {\n    let hex = solidity.pack([\"uint16\"], [3 /* TYPE_3 */]);\n    this.workerOptions.forEach((w) => {\n      for (const option of w.options) {\n        if (w.workerId === 1 /* EXECUTOR */) {\n          hex += trim0x(\n            solidity.pack(\n              [\"uint8\", \"uint16\", \"uint8\", \"bytes\"],\n              [w.workerId, trim0x(option.params).length / 2 + 1, option.type, option.params]\n            )\n          );\n        } else if (w.workerId === 2 /* VERIFIER */) {\n          const verifierOption = option;\n          hex += trim0x(\n            solidity.pack(\n              [\"uint8\", \"uint16\", \"uint8\", \"uint8\", \"bytes\"],\n              [\n                w.workerId,\n                trim0x(option.params).length / 2 + 2,\n                verifierOption.index,\n                verifierOption.type,\n                verifierOption.params\n              ]\n            )\n          );\n        }\n      }\n    });\n    return hex;\n  }\n  /**\n   * Serialize Options to Uint8Array.\n   */\n  toBytes() {\n    return bytes.arrayify(this.toHex());\n  }\n  addOption(workerId, option) {\n    const worker = this.workerOptions.find((w) => w.workerId === workerId);\n    if (worker) {\n      worker.options.push(option);\n    } else {\n      this.workerOptions.push({ workerId, options: [option] });\n    }\n  }\n  /**\n   * Decode ExecutorOptionType.LZ_RECEIVE option.  Returns undefined if the option is not present.\n   */\n  decodeExecutorLzReceiveOption() {\n    const options = this.findOptions(1 /* EXECUTOR */, 1 /* LZ_RECEIVE */);\n    if (!options || options.length === 0) {\n      return;\n    }\n    let totalGas = bignumber.BigNumber.from(0).toBigInt();\n    let totalValue = bignumber.BigNumber.from(0).toBigInt();\n    for (const option of options) {\n      const buffer = Buffer.from(trim0x(option.params), \"hex\");\n      const gas = bignumber.BigNumber.from(buffer.subarray(0, 16)).toBigInt();\n      const value = bignumber.BigNumber.from(buffer.length === 16 ? 0 : buffer.subarray(16, 32)).toBigInt();\n      totalGas = totalGas + gas;\n      totalValue = totalValue + value;\n    }\n    return { gas: totalGas, value: totalValue };\n  }\n  /**\n   * Decode ExecutorOptionType.NATIVE_DROP options.  Returns undefined if the options is not present.\n   */\n  decodeExecutorNativeDropOption() {\n    const options = this.findOptions(1 /* EXECUTOR */, 2 /* NATIVE_DROP */);\n    if (!options || options.length === 0) {\n      return [];\n    }\n    const results = options.reduce((acc, cur) => {\n      const buffer = Buffer.from(trim0x(cur.params), \"hex\");\n      const amount = bignumber.BigNumber.from(buffer.subarray(0, 16)).toBigInt();\n      const receiver = bytes.hexlify(buffer.subarray(16, 48));\n      if (acc[receiver]) {\n        acc[receiver][\"amount\"] = acc[receiver].amount + amount;\n      } else {\n        acc[receiver] = { amount, receiver };\n      }\n      return acc;\n    }, {});\n    return Object.values(results);\n  }\n  /**\n   * Decode ExecutorOptionType.COMPOSE options.  Returns undefined if the options is not present.\n   */\n  decodeExecutorComposeOption() {\n    const options = this.findOptions(1 /* EXECUTOR */, 3 /* COMPOSE */);\n    if (!options || options.length === 0) {\n      return [];\n    }\n    const results = options.reduce(\n      (acc, cur) => {\n        const buffer = Buffer.from(trim0x(cur.params), \"hex\");\n        const index = bignumber.BigNumber.from(buffer.subarray(0, 2)).toNumber();\n        const gas = bignumber.BigNumber.from(buffer.subarray(2, 18)).toBigInt();\n        const value = (buffer.length === 34 ? bignumber.BigNumber.from(buffer.subarray(18, 34)) : bignumber.BigNumber.from(0)).toBigInt();\n        if (acc[index]) {\n          acc[index][\"gas\"] = acc[index].gas + gas;\n          acc[index][\"value\"] = acc[index].value + value;\n        } else {\n          acc[index] = { index, gas, value };\n        }\n        return acc;\n      },\n      {}\n    );\n    return Object.values(results);\n  }\n  /**\n   * Decode ExecutorOptionType.ORDERED options.  Returns undefined if the options is not present.\n   */\n  decodeExecutorOrderedExecutionOption() {\n    const option = this.findOptions(1 /* EXECUTOR */, 4 /* ORDERED */);\n    return option !== void 0;\n  }\n  findOptions(workerId, optionType) {\n    const worker = this.workerOptions.find((w) => w.workerId === workerId);\n    if (worker) {\n      if (optionType === 4 /* ORDERED */) {\n        return worker.options.find((o) => o.type === optionType);\n      }\n      return worker.options.filter((o) => o.type === optionType);\n    }\n  }\n  /**\n   * Find VerifierOption by verifierIdx and optionType.  Returns undefined if the option is not present.\n   * @param {number} verifierIdx\n   * @param {number} optionType\n   */\n  findVerifierOption(verifierIdx, optionType) {\n    const worker = this.workerOptions.find((w) => w.workerId === 2 /* VERIFIER */);\n    if (worker) {\n      const opt = worker.options.find((o) => o.type === optionType && o.index === verifierIdx);\n      if (opt) {\n        return opt;\n      }\n    }\n  }\n};\n\n// src/model/packet.ts\nfunction packetToMessageOrigin(packet) {\n  return {\n    srcEid: packet.srcEid,\n    sender: packet.sender,\n    nonce: packet.nonce\n  };\n}\nvar PACKET_VERSION_OFFSET = 0;\nvar NONCE_OFFSET = 1;\nvar SRC_CHAIN_OFFSET = 9;\nvar SRC_ADDRESS_OFFSET = 13;\nvar DST_CHAIN_OFFSET = 45;\nvar DST_ADDRESS_OFFSET = 49;\nvar GUID_OFFSET = 81;\nvar MESSAGE_OFFSET = 113;\nvar PacketV1Codec = class _PacketV1Codec {\n  buffer;\n  static from(payloadEncoded) {\n    return new _PacketV1Codec(payloadEncoded);\n  }\n  static fromBytes(payload) {\n    return new _PacketV1Codec(\"0x\" + Buffer.from(payload).toString(\"hex\"));\n  }\n  constructor(payloadEncoded) {\n    this.buffer = Buffer.from(trim0x(payloadEncoded), \"hex\");\n  }\n  /**\n   * encode packet to hex string\n   */\n  static encode(packet) {\n    const message = trim0x(packet.message);\n    const buffer = Buffer.alloc(MESSAGE_OFFSET + message.length / 2);\n    buffer.writeUInt8(packet.version, PACKET_VERSION_OFFSET);\n    buffer.writeBigUInt64BE(BigInt(packet.nonce), NONCE_OFFSET);\n    buffer.writeUInt32BE(packet.srcEid, SRC_CHAIN_OFFSET);\n    buffer.write(trim0x(hexZeroPadTo32(packet.sender)), SRC_ADDRESS_OFFSET, 32, \"hex\");\n    buffer.writeUInt32BE(packet.dstEid, DST_CHAIN_OFFSET);\n    buffer.write(trim0x(hexZeroPadTo32(packet.receiver)), DST_ADDRESS_OFFSET, 32, \"hex\");\n    buffer.write(trim0x(packet.guid), GUID_OFFSET, 32, \"hex\");\n    buffer.write(message, MESSAGE_OFFSET, message.length / 2, \"hex\");\n    return \"0x\" + buffer.toString(\"hex\");\n  }\n  version() {\n    return this.buffer.readUInt8(PACKET_VERSION_OFFSET);\n  }\n  nonce() {\n    return this.buffer.readBigUint64BE(NONCE_OFFSET).toString();\n  }\n  srcEid() {\n    return this.buffer.readUint32BE(SRC_CHAIN_OFFSET);\n  }\n  sender() {\n    return \"0x\" + this.buffer.slice(SRC_ADDRESS_OFFSET, DST_CHAIN_OFFSET).toString(\"hex\");\n  }\n  senderAddressB20() {\n    return bytes32ToEthAddress(this.sender());\n  }\n  dstEid() {\n    return this.buffer.readUint32BE(DST_CHAIN_OFFSET);\n  }\n  receiver() {\n    return \"0x\" + this.buffer.slice(DST_ADDRESS_OFFSET, GUID_OFFSET).toString(\"hex\");\n  }\n  receiverAddressB20() {\n    return bytes32ToEthAddress(this.receiver());\n  }\n  guid() {\n    return \"0x\" + this.buffer.slice(GUID_OFFSET, MESSAGE_OFFSET).toString(\"hex\");\n  }\n  message() {\n    return \"0x\" + this.buffer.slice(MESSAGE_OFFSET).toString(\"hex\");\n  }\n  payloadHash() {\n    return keccak256.keccak256(this.payload());\n  }\n  payload() {\n    return \"0x\" + this.buffer.slice(GUID_OFFSET).toString(\"hex\");\n  }\n  header() {\n    return \"0x\" + this.buffer.slice(0, GUID_OFFSET).toString(\"hex\");\n  }\n  headerHash() {\n    return keccak256.keccak256(this.header());\n  }\n  /**\n   * deserialize packet from hex string\n   * @deprecated use toPacket instead\n   */\n  decode() {\n    return this.toPacket();\n  }\n  toPacket() {\n    return {\n      version: this.version(),\n      nonce: this.nonce(),\n      srcEid: this.srcEid(),\n      sender: this.sender(),\n      dstEid: this.dstEid(),\n      receiver: this.receiver(),\n      guid: this.guid(),\n      message: this.message(),\n      // derived\n      payload: this.payload()\n    };\n  }\n};\nfunction calculateGuid(packetHead) {\n  return keccak256.keccak256(\n    solidity.pack(\n      [\"uint64\", \"uint32\", \"bytes32\", \"uint32\", \"bytes32\"],\n      [\n        bignumber.BigNumber.from(packetHead.nonce),\n        packetHead.srcEid,\n        addressToBytes32(packetHead.sender),\n        packetHead.dstEid,\n        addressToBytes32(packetHead.receiver)\n      ]\n    )\n  );\n}\n\n// src/codec/packet-serializer.ts\nvar PacketSerializer = class {\n  static serialize(packet) {\n    return PacketV1Codec.encode(packet);\n  }\n  static deserialize(bytesLike) {\n    let codec;\n    if (bytesLike instanceof Uint8Array) {\n      codec = PacketV1Codec.fromBytes(bytesLike);\n    } else {\n      codec = PacketV1Codec.from(bytesLike);\n    }\n    return codec.toPacket();\n  }\n};\n\nObject.defineProperty(exports, \"keccak256\", ({\n  enumerable: true,\n  get: function () { return keccak256.keccak256; }\n}));\nexports.ExecutorOptionType = ExecutorOptionType;\nexports.OptionType = OptionType;\nexports.Options = Options;\nexports.PacketSerializer = PacketSerializer;\nexports.PacketV1Codec = PacketV1Codec;\nexports.VerifierOptionType = VerifierOptionType;\nexports.WorkerId = WorkerId;\nexports.addressToBytes32 = addressToBytes32;\nexports.bytes32ToEthAddress = bytes32ToEthAddress;\nexports.calculateGuid = calculateGuid;\nexports.hexZeroPadTo32 = hexZeroPadTo32;\nexports.isSolanaAddress = isSolanaAddress;\nexports.optionsType1 = optionsType1;\nexports.optionsType2 = optionsType2;\nexports.packetToMessageOrigin = packetToMessageOrigin;\nexports.parseError = parseError;\nexports.parsePrecrimeConfig = parsePrecrimeConfig;\nexports.trim0x = trim0x;\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.cjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@layerzerolabs/lz-v2-utilities/dist/index.cjs\n");

/***/ })

};
;